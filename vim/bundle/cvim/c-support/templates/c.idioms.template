$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function ==
/**
 * <+desrciption+>
 * @param   x   y
 * @return  z
 */
void<CURSOR> |?FUNCTION_NAME| <+argument list+>) {

<SPLIT>	return <+return value+>;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function-static ==
/**
 * <+desrciption+>
 * @param   x   y
 * @return  z
 */
void<CURSOR> |?FUNCTION_NAME|(<+argument list+>) {

<SPLIT>	return <+return value+>;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.main ==
#include	<stdlib.h>

int main(int argc, char** argv) {
{<CURSOR>
<SPLIT>	return EXIT_SUCCESS;
}				/* ----------  end of function main  ---------- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.enum ==
typedef enum {<CURSOR>
<SPLIT>} |?ENUM_NAME|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.struct ==
typedef struct { <CURSOR>
<SPLIT>} |?STRUCT_NAME|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.union ==
typedef struct { <CURSOR>
<SPLIT>} |?UNION_NAME|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.printf == insert ==
printf("<CURSOR>\n");
== idioms.scanf == insert ==
scanf("<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.calloc ==
|?POINTER|	= calloc ( (size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free (|POINTER|);
|POINTER|	= NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.malloc ==
|?POINTER|	= malloc ( sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free (|POINTER|);
|POINTER|	= NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.sizeof == insert ==
sizeof(<CURSOR><SPLIT>)
== idioms.assert == insert ==
assert(<CURSOR><SPLIT>);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-input-file ==
FILE	*fp;
char	*filename = "<CURSOR>";

fp = fopen(filename, "r");
if (fp != NULL) {
    <SPLIT>{-continue here-}
    if(fclose(fp) == EOF) {
        perror("couldn't close file %s", filename);
        exit (EXIT_FAILURE);
    }
} else {
    perror("couldn't open file %s", filename);
    exit (EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-output-file ==
FILE	*fp;
char	*filename = "<CURSOR>";

fp = fopen(filename, "w");
if (fp != NULL) {
    <SPLIT>{-continue here-}
    if(fclose(fp) == EOF) {
        perror("couldn't close file %s", filename);
        exit (EXIT_FAILURE);
    }
} else {
    perror("couldn't open file %s", filename);
    exit (EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.fprintf == insert ==
fprintf(|?FILEPOINTER|, "<CURSOR>\n", );
== idioms.fscanf == insert ==
fscanf(|?FILEPOINTER|, "<CURSOR>", & );
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
